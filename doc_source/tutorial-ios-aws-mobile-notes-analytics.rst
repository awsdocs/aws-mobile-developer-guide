.. Copyright 2010-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0
   International License (the "License"). You may not use this file except in compliance with the
   License. A copy of the License is located at http://creativecommons.org/licenses/by-nc-sa/4.0/.

   This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
   either express or implied. See the License for the specific language governing permissions and
   limitations under the License.

.. _tutorial-ios-aws-mobile-notes-analytics:

##############################
Add Analytics to the Notes App
##############################

In the :ref:`previous section <tutorial-ios-aws-mobile-notes-setup>` of this tutorial, we installed Xcode,
downloaded a sample note-taking app from GitHub, then compiled and ran
it in the iOS Simulator. This tutorial assumes you have completed the
those steps. In this section, we will extend the notes app to
include application analytics. Application analytics allow us to gather
demographic information about the application usage.

You should be able to complete this section in 10-15 minutes.

Create an AWS Backend
---------------------
#. In a terminal window, enter the following commands to initialize your project using AWS Amplify:

   .. code-block:: bash

      $ cd ~/aws-mobile-ios-notes-tutorial-master/
      $ amplify init

   The CLI prompts you through the process of intializing your backend project. Specify iOS for the app type when prompted.

#. Next, add the anlaytics service to your backend. 

   .. code-block:: bash

      $ amplify analytics add

   Again, the CLI prompts you through the process of initializing your backend project. Finally, deploy the resources you have provisioned:

#. To create your backend AWS resources run:

   .. code-block:: bash

      $ amplify push

The :code:`amplify init` command will do two things within your project:

*  Create a basic backend definition in the :file:`amplify` directory.
*  Create an :file:`awsconfiguration.json` file describing the backend in the :file:`aws-mobile-ios-notes-tutorial-master` project directory.

The :code:`amplify analytics add` command will add the appropriate entries into the backend definition file for deploying Amazon Pinpoint as a service for this project.  The :code:`amplify push` command will deploy any new services that are defined and update the :file:`awsconfiguration.json` file so that the new services can be used within your app.


Add Analytics Dependencies
--------------------------

#. To create a :file:`Podfile` for your project, run from within your project folder:

   .. code-block:: bash

      $ pod init

#. Open :file:`Podfile` and replace the placeholder code with the following. If the file is not visible your Xcode Project Navigator, right-click the project root and choose :guilabel:`Show in finder`.

   .. code-block:: bash

      platform :ios, '9.0'
        target :'MyNotes' do
          use_frameworks!

            # Analytics dependency
            pod 'AWSPinpoint'

            # other pods
      end

#. Close your Xcode project and then run the following command from a terminal:

   .. code-block:: bash

      $ pod install --repo-update

   If you encounter an error message that begins ":code:`[!] Failed to connect to GitHub to update the CocoaPods/Specs . . .`", and your internet connectivity is working, you may need to `update openssl and Ruby <https://stackoverflow.com/questions/38993527/cocoapods-failed-to-connect-to-github-to-update-the-cocoapods-specs-specs-repo/48962041#48962041>`__.

   .. list-table::
      :widths: 1 6

      * - **Important**

        - From this point forward, **open your project using the** :file:`.xcworkspace` **file** generated by cocoapods for all further development.

#. Rebuild your app after reopening it in the workspace to resolve APIs from new libraries called in your code. This is a good practice any time you add import statements.

Add AWS Resource Configuration
------------------------------

#. The Amplify CLI creates and updates an AWS resources configuration :file:`awsconfiguration.json` file for each configured feature. This file needs to be added to your Xcode project just once and the Amplify CLI will keep it in sync as you add features to your project.

#. Launch project in Xcode 
   
   .. code-block:: bash

      $ open MyNotes.xcworkspace

#. Drag :file:`awsconfiguration.json` from the project folder into the Xcode project. Uncheck :guilabel:`Copy items if needed` and check :guilabel:`Create groups` in the options dialog.

#. Choose :guilabel:`Finish`.

You have now created the AWS resources you need and connected them to your app.

Initialize Analytics
--------------------

To turn analytics on, open your project using :file:`MyNotes.xcworkspace` and insert the following code into the :code:`didFinishLaunchwithOptions` function of your app's :file:`AppDelegate.swift`.

.. code-block:: swift

   // Analytics required imports
    
   // . . .
   import AWSCore
   import AWSPinpoint

   class AppDelegate: UIResponder, UIApplicationDelegate {

         // Add the pinpoint variable
         var pinpoint: AWSPinpoint?

         // . . .

         func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions:
         [UIApplicationLaunchOptionsKey: Any]?) -> Bool {

            // . . .
             
            // Initialize Pinpoint to enable session analytics
            pinpoint = AWSPinpoint(configuration:
                 AWSPinpointConfiguration.defaultPinpointConfiguration(launchOptions: launchOptions))

            return true
         }

         // . . .
    }

Now your app is setup to provide session and demographic analytics automatically when launched. 

Run the Project and Validate Results
------------------------------------

Run the application in the simulator. The app should work exactly as before but now the app is
generating analytics traffic that can be shown in the Amazon Pinpoint console.

To view the demographics and session events, run the following command:

.. code-block:: bash

   $ amplify analytics console

Note that it can take up to 5 minutes for the first data to be shown in the graphs.  You should see an up-tick in several graphs:

   .. image:: images/pinpoint-overview.png
      :scale: 100 %
      :alt: Image of the Amazon Pinpoint console.

   .. only:: pdf

      .. image:: images/pinpoint-overview.png
         :scale: 50

   .. only:: kindle

      .. image:: images/pinpoint-overview.png
         :scale: 75


Choose :guilabel:`Demographics` to view the demographics information.

   .. image:: images/pinpoint-demographics.png
      :scale: 100 %
      :alt: Image of the Amazon Pinpoint console Demographics tab.

   .. only:: pdf

      .. image:: images/pinpoint-demographics.png
         :scale: 50

   .. only:: kindle

      .. image:: images/pinpoint-demographics.png
         :scale: 75


If you see data within each page, you have successfully added analytics
to your app. Should you release your app, you can come
back here to see more details about your users.

Add Custom Analytics
--------------------

Amazon Pinpoint also allows you to capture custom analytics data for events that show usage of your app's features. For this tutorial we'll send analytics each time a note is added or deleted.

To add analytics events, open :file:`./Data/NotesContentProvider.swift` where both add and delete operations happen.

Start by adding the following imports.

.. code-block:: swift
   
   // . . .
   import AWSCore
   import AWSPinpoint

Add the following function and enum to the :code:`Data\NotesContentProvider` class to send :code:`AddNote` and :code:`DeleteNote` event analytics.

.. code-block:: swift

   public class NotesContentProvider  {

       // . . .

       // Send analytics AddNote and DeleteNote events
       func sendNoteEvent(noteId: String, eventType: String)
       {

           let pinpointClient = AWSPinpoint(configuration:
               AWSPinpointConfiguration.defaultPinpointConfiguration(launchOptions: nil))

           let pinpointAnalyticsClient = pinpointClient.analyticsClient

           let event = pinpointAnalyticsClient.createEvent(withEventType: eventType)
           event.addAttribute("NoteId", forKey: noteId)
           pinpointAnalyticsClient.record(event)
           pinpointAnalyticsClient.submitEvents()
       }

       enum noteEventType: String {
           case AddNote = "AddNote"
           case DeleteNote = "DeleteNote"
       }

   }

To capture note additions, place the following :code:`sendNoteEvent` function call within the :code:`insert` function of the :code:`NotesContentProvider` class.

.. code-block:: swift

   /**  
    * Insert a new record into the database using NSManagedObjectContext
    *
    * @param noteTitle the note title to be inserted
    * @param noteContent the note content to be inserted
    * @return noteId the unique Note Id
   */
   func insert(noteTitle: String, noteContent: String) -> String {

        // . . .

        print("New Note Saved : \(newNoteId)")

        //Send AddNote analytics event
        sendNoteEvent(noteId: newNoteId, eventType: noteEventType.AddNote.rawValue)

        return newNoteId
   }

To capture note deletions, place the following :code:`sendNoteEvent` function call within the :code:`delete` function of that class.

.. code-block:: swift

    /**
     * Delete note using NSManagedObjectContext and NSManagedObject
     * @param managedObjectContext the managed context for the note to be deleted
     * @param managedObj the core data managed object for note to be deleted
     * @param noteId the noteId to be delete
    */
    public func delete(managedObjectContext: NSManagedObjectContext, managedObj: NSManagedObject, noteId: String!)  {
        let context = managedObjectContext
        context.delete(managedObj)

        do {

            // . . .

            // Send DeletNote analytics event
            sendNoteEvent(noteId: noteId, eventType: noteEventType.DeleteNote.rawValue)

        } catch {
            // . . .
        }
    }

View Your Custom Analytics
--------------------------

To view the :code:`AddNote` and :code:`DeleteNote` custom analytics events, rebuild and run your app in an iOS simulator, add and delete notes, then return to the Amazon Pinpoint console.

#. From the Analytics view in the Pinpoint console, choose :guilabel:`Events`.

#. Use the Event drop down to filter the event type (event types may take several minutes to appear).

   .. image:: images/pinpoint-addnote.png
      :scale: 100 %
      :alt: Image of the Add note event in the Amazon Pinpoint.

   .. only:: pdf

      .. image:: images/pinpoint-addnote.png
         :scale: 50

   .. only:: kindle

      .. image:: images/pinpoint-addnote.png
         :scale: 75

Next steps
----------

*  Continue by adding :ref:`Authentication <tutorial-ios-aws-mobile-notes-auth>`.

*  Learn more about `Amazon Pinpoint <https://aws.amazon.com/pinpoint/>`__.
